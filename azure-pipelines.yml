# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


#trigger:
#- master


#hello world example
# https://docs.microsoft.com/en-us/azure/devops/pipelines/languages/dotnet-core?view=azure-devops


# examples of other options: 'macOS-10.13', 'vs2017-win2016'
pool:
  vmImage: 'windows-latest'
#  vmImage: 'ubuntu-latest' 
  
# do this before all your .NET Core tasks
steps:
- task: DotNetCoreInstaller@0
  inputs:
    version: '2.1.300'







- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: build
    projects: '$(Build.projects)'
    arguments: '--configuration Release -o $(Build.output.dir)'


- task: VSTest@2
  displayName: Test
  inputs:
    testSelector: 'testAssemblies'
    testAssemblyVer2: '**\\*Test.dll'
    searchFolder: '$(Build.output.dir)'

#- task: DotNetCoreCLI@2
#  displayName: Test
#  inputs:
#    command: 'test'
#    projects: '$(Build.tests)'
#    arguments: '-o /home/vsts/work/1/s/ -r $(Path.Test.Results)'
#    verbosityPack: 'Detailed'
#    arguments: '--configuration Release' # Update this to match your need
- task: PublishTestResults@2
  inputs:
    testResultsFormat: NUnit
- task: PublishBuildArtifacts@1

#- task: DownloadBuildArtifacts@0
#  inputs:
#    artifactName: theAwsomAtriFact
#    buildType: current
#    buildVersionToDownload: latest

#steps:
#- script: echo Hello, world!
#  displayName: 'Run a one-line script'

#- script: |
#    echo Add other tasks to build, test, and deploy your project.
#    echo See https://aka.ms/yaml
#  displayName: 'Run a multi-line script'

#- bash: ./test.sh
